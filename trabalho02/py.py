from collections import deque

# Defini√ß√£o da tabela LL(1) como um dicion√°rio (chave: (n√£o-terminal, terminal))
tabela_LL1 = {
    ("S", "if"): ["if", "E", "then", "S", "else", "S"],
    ("S", "a"): ["a"],
    ("E", "b"): ["b"],
    ("E", "c"): ["c"]
}

# Fun√ß√£o para verificar se um s√≠mbolo √© terminal
def eh_terminal(simbolo):
    return simbolo in ["if", "then", "else", "a", "b", "c", "$"]

# Fun√ß√£o do parser LL(1)
def parser_LL1(entrada):
    # Adiciona $ ao final da entrada
    entrada.append("$")
    index = 0  # √çndice da entrada (lookahead)

    # Pilha inicial
    pilha = deque(["$", "S"])

    print(f"{'Pilha':<30}{'Entrada':<30}{'A√ß√£o'}")
    print("="*80)

    while pilha:
        topo = pilha.pop()  # Remove o topo da pilha
        lookahead = entrada[index]  # Primeiro s√≠mbolo da entrada

        print(f"{' '.join(pilha):<30}{' '.join(entrada[index:]):<30}", end="")

        if topo == lookahead:
            # Correspond√™ncia entre terminal e entrada ‚Üí Avan√ßa na entrada
            index += 1
            print(f"Match '{lookahead}'")
        elif (topo, lookahead) in tabela_LL1:
            # Substitui topo por produ√ß√£o correspondente na tabela
            producao = tabela_LL1[(topo, lookahead)]
            print(f"Usa regra {topo} ‚Üí {' '.join(producao)}")
            pilha.extend(reversed(producao))  # Empilha a produ√ß√£o em ordem reversa
        else:
            # Erro sint√°tico se n√£o houver regra na tabela
            print(f"Erro sint√°tico! '{lookahead}' inesperado.")
            return False

    # Se pilha vazia e entrada consumida corretamente, a an√°lise √© v√°lida
    if index == len(entrada):
        print("\nEntrada aceita! üéâ")
        return True
    else:
        print("\nErro: entrada n√£o consumida completamente.")
        return False

# Testando com a entrada "if b then a else a $"
entrada_teste = ["if", "b", "then", "a", "else", "a"]
parser_LL1(entrada_teste)
