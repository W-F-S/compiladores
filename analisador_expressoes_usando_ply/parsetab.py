
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSrightPOWERCOMMENT_MULTI COMMENT_SINGLE DIVIDE EQUALS FLOAT IDENTIFIER INTEGER LPAREN MINUS PLUS POWER RPAREN TIMES\nexpression : expression PLUS expression\n          | expression MINUS expression\n          | expression TIMES expression\n          | expression DIVIDE expression\n          | expression POWER expression\nexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPAREN\nexpression : INTEGER\n          | FLOAT\nexpression : IDENTIFIERexpression : IDENTIFIER LPAREN expression RPARENexpression : IDENTIFIER EQUALS expression'
    
_lr_action_items = {'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[2,8,2,2,-8,-9,-10,2,2,2,2,2,-6,8,2,2,-1,-2,-3,-4,-5,-7,8,8,-11,]),'LPAREN':([0,2,3,6,7,8,9,10,11,14,15,],[3,3,3,14,3,3,3,3,3,3,3,]),'INTEGER':([0,2,3,7,8,9,10,11,14,15,],[4,4,4,4,4,4,4,4,4,4,]),'FLOAT':([0,2,3,7,8,9,10,11,14,15,],[5,5,5,5,5,5,5,5,5,5,]),'IDENTIFIER':([0,2,3,7,8,9,10,11,14,15,],[6,6,6,6,6,6,6,6,6,6,]),'$end':([1,4,5,6,12,16,17,18,19,20,21,23,24,],[0,-8,-9,-10,-6,-1,-2,-3,-4,-5,-7,-12,-11,]),'PLUS':([1,4,5,6,12,13,16,17,18,19,20,21,22,23,24,],[7,-8,-9,-10,-6,7,-1,-2,-3,-4,-5,-7,7,7,-11,]),'TIMES':([1,4,5,6,12,13,16,17,18,19,20,21,22,23,24,],[9,-8,-9,-10,-6,9,9,9,-3,-4,-5,-7,9,9,-11,]),'DIVIDE':([1,4,5,6,12,13,16,17,18,19,20,21,22,23,24,],[10,-8,-9,-10,-6,10,10,10,-3,-4,-5,-7,10,10,-11,]),'POWER':([1,4,5,6,12,13,16,17,18,19,20,21,22,23,24,],[11,-8,-9,-10,11,11,11,11,11,11,11,-7,11,11,-11,]),'RPAREN':([4,5,6,12,13,16,17,18,19,20,21,22,23,24,],[-8,-9,-10,-6,21,-1,-2,-3,-4,-5,-7,24,-12,-11,]),'EQUALS':([6,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,7,8,9,10,11,14,15,],[1,12,13,16,17,18,19,20,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','trabalho.py',101),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','trabalho.py',102),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','trabalho.py',103),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','trabalho.py',104),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','trabalho.py',105),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','trabalho.py',110),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','trabalho.py',114),
  ('expression -> INTEGER','expression',1,'p_expression_number','trabalho.py',119),
  ('expression -> FLOAT','expression',1,'p_expression_number','trabalho.py',120),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','trabalho.py',125),
  ('expression -> IDENTIFIER LPAREN expression RPAREN','expression',4,'p_expression_function','trabalho.py',133),
  ('expression -> IDENTIFIER EQUALS expression','expression',3,'p_assignment','trabalho.py',141),
]
